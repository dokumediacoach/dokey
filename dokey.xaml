<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="do·key"
        ResizeMode="CanMinimize"
        SizeToContent="Height"
        Width="420"
        WindowStyle="None"
        WindowStartupLocation="CenterScreen"
        Topmost="True"
        FontSize="15">
    <Window.Resources>
        <!-- colors for light mode are defined here (and later used as DynamicResource) -->
        <SolidColorBrush x:Key="ForegroundColor" Color="#000000"/>
        <SolidColorBrush x:Key="WindowBorderColor" Color="#000000"/>
        <SolidColorBrush x:Key="WindowBackgroundColor" Color="#FAF8EF"/>
        <SolidColorBrush x:Key="DokeyToggleButtonColor" Color="#000000"/>
        <SolidColorBrush x:Key="ContextMenuBackgroundLeftColor" Color="#f1f1f1"/>
        <SolidColorBrush x:Key="ContextMenuBackgroundLeftEdgeColor" Color="#e3e4e4"/>
        <SolidColorBrush x:Key="ContextMenuBackgroundRightEdgeColor" Color="#fafbfb"/>
        <SolidColorBrush x:Key="ContextMenuBackgroundRightColor" Color="#f5f5f5"/>
        <SolidColorBrush x:Key="ContextMenuBorderColor" Color="#cccccc"/>
        <SolidColorBrush x:Key="ContextMenuSeparatorColor" Color="#d7d7d7"/>
        <SolidColorBrush x:Key="MenuItemSelectedBackgroundColor" Color="#7FDDDDDD" />
        <SolidColorBrush x:Key="TextBoxBorderColor" Color="#ABADB3"/>
        <SolidColorBrush x:Key="TextBoxBackgroundColor" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="GenerateButtonColor" Color="#000000"/>
        <SolidColorBrush x:Key="CopyButtonColor" Color="#000000"/>
        <SolidColorBrush x:Key="ButtonBackgroundColor" Color="#E3DBDB"/>
        <SolidColorBrush x:Key="WindowCloseButtonBackgroundColor" Color="#FFB380"/>
        <SolidColorBrush x:Key="CountdownColor" Color="#B76CB7"/>
        <SolidColorBrush x:Key="CheckBoxBackgroundColor" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="CheckBoxBorderColor" Color="#707070"/>
        <SolidColorBrush x:Key="OptionMarkGlyphColor" Color="#212121"/>
        <SolidColorBrush x:Key="OptionMarkMouseOverBackgroundColor" Color="#F3F9FF"/>
        <SolidColorBrush x:Key="OptionMarkMouseOverBorderColor" Color="#5593FF"/>
        <SolidColorBrush x:Key="OptionMarkMouseOverGlyphColor" Color="#212121"/>
        <SolidColorBrush x:Key="OptionMarkPressedBackgroundColor" Color="#D9ECFF"/>
        <SolidColorBrush x:Key="OptionMarkPressedBorderColor" Color="#3C77DD"/>
        <SolidColorBrush x:Key="OptionMarkPressedGlyphColor" Color="#212121"/>
        <SolidColorBrush x:Key="OptionMarkDisabledBackgroundColor" Color="#E6E6E6"/>
        <SolidColorBrush x:Key="OptionMarkDisabledBorderColor" Color="#BCBCBC"/>
        <SolidColorBrush x:Key="OptionMarkDisabledGlyphColor" Color="#707070"/>

        <DrawingGroup x:Key="ContextMenuBackgroundDrawingGroup">
            <DrawingGroup.ClipGeometry>
                <RectangleGeometry Rect="0.0,0.0,1000.0,999.99999"/>
            </DrawingGroup.ClipGeometry>
            <DrawingGroup Transform="1.0,0.0,0.0,1.0,-2.0,-32.859375">
                <GeometryDrawing Brush="{DynamicResource ContextMenuBackgroundLeftColor}">
                    <GeometryDrawing.Geometry>
                        <PathGeometry Figures="m 2 32.86 v 1000 h 30 v -1000 z" FillRule="Nonzero"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="{DynamicResource ContextMenuBackgroundLeftEdgeColor}">
                    <GeometryDrawing.Geometry>
                        <PathGeometry Figures="m 32 32.86 v 1000 h 1 v -1000 z" FillRule="Nonzero"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="{DynamicResource ContextMenuBackgroundRightEdgeColor}">
                    <GeometryDrawing.Geometry>
                        <PathGeometry Figures="M 33 32.8594 V 1032.86 h 1 V 32.8594 Z" FillRule="Nonzero"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="{DynamicResource ContextMenuBackgroundRightColor}">
                    <GeometryDrawing.Geometry>
                        <PathGeometry Figures="M 34 32.8594 V 1032.86 h 968 V 32.8594 Z" FillRule="Nonzero"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingGroup>
        <DrawingBrush x:Key="ContextMenuBackground" Drawing="{StaticResource ContextMenuBackgroundDrawingGroup}" Stretch="None" ViewportUnits="Absolute" Viewport="0,0,1000,1000"/>

        <Storyboard x:Key="Countdown">
            <PointAnimationUsingPath Name="CountdownPointAnimation"
                                     Storyboard.TargetName="arcStartPoint"
                                     Storyboard.TargetProperty="StartPoint"
                                     Duration="0:0:20">
                <PointAnimationUsingPath.PathGeometry>
                    <PathGeometry Figures="M 0 -16 A 16 16 0 0 1 0 16
                                                   A 16 16 0 0 1 0 -16" />
                </PointAnimationUsingPath.PathGeometry>
            </PointAnimationUsingPath>
            <BooleanAnimationUsingKeyFrames Storyboard.TargetName="arcCountdown"
                                            Storyboard.TargetProperty="IsLargeArc"
                                            Duration="0:0:20">
                <DiscreteBooleanKeyFrame KeyTime="0:0:0"
                                         Value="True"/>
                <DiscreteBooleanKeyFrame KeyTime="0:0:10"
                                         Value="False"/>
            </BooleanAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="countdownCanvas"
                                           Storyboard.TargetProperty="Visibility"
                                           Duration="0:0:20">
                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:20" Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
        <Style TargetType="Button">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Background" Value="{DynamicResource ButtonBackgroundColor}"/>
            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="1">
                            <Border.Background>
                                <SolidColorBrush
                                    x:Name="windowButtonBackground"
                                    Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background.Color}"
                                    Opacity="0"/>
                            </Border.Background>
                            <ContentPresenter RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation  
                                                Storyboard.TargetName="windowButtonBackground"
                                                Storyboard.TargetProperty="Opacity"
                                                To="1" Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation  
                                                Storyboard.TargetName="windowButtonBackground"
                                                Storyboard.TargetProperty="Opacity"
                                                To="0" Duration="0:0:0.3" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.3" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ContextMenu">
            <Setter Property="Background" Value="{DynamicResource ContextMenuBackground}"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource ContextMenuBorderColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border>
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="True">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Padding" Value="0,0,5,5"/>
                                            <Setter Property="Effect">
                                                <Setter.Value>
                                                    <DropShadowEffect BlurRadius="4"
                                                                      Opacity="0.8"
                                                                      ShadowDepth="1"/>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}">
                                <ItemsPresenter 
                                    KeyboardNavigation.DirectionalNavigation="Cycle" 
                                    Margin="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="MenuItem">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Margin" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="MenuItem">
                        <Border Name="Border" Padding="0,2,0,3">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="33" SharedSizeGroup="Icon"/>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="13"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Name="Icon" Margin="0,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                                <Border Name="Check"
                                        Width="14" Height="13" 
                                        Margin="-2,1,6,0"
                                        SnapsToDevicePixels="True"
                                        Visibility="Collapsed"
                                        Background="{DynamicResource ContextMenuBackgroundLeftColor}"
                                        BorderBrush="{DynamicResource CheckBoxBorderColor}"
                                        BorderThickness="1">
                                    <Path Name="CheckMark"
                                        Margin="1"
                                        Visibility="Hidden" 
                                        Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                        Fill="{DynamicResource OptionMarkGlyphColor}"
                                        Stretch="None" />
                                </Border>
                                <ContentPresenter Name="HeaderHost"
                                                Grid.Column="1"
                                                ContentSource="Header"
                                                RecognizesAccessKey="True"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsCheckable" Value="True">
                                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuItemSelectedBackgroundColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
            <Setter Property="Margin" Value="0,4,0,3"/>
            <Setter Property="Background" Value="{DynamicResource ContextMenuSeparatorColor}"/>
        </Style>

    </Window.Resources>

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="30" ResizeBorderThickness="0"/>
    </WindowChrome.WindowChrome>
    <Border Background="{DynamicResource WindowBackgroundColor}"
            BorderBrush="{DynamicResource WindowBorderColor}"
            BorderThickness="1">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid>
                <Grid.Resources>
                    <Style TargetType="Button">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundColor}"/>
                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border CornerRadius="1">
                                        <Border.Background>
                                            <SolidColorBrush
                                                x:Name="windowButtonBackground"
                                                Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background.Color}"
                                                Opacity="0"/>
                                        </Border.Background>
                                        <ContentPresenter RecognizesAccessKey="True" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation  
                                                            Storyboard.TargetName="windowButtonBackground"
                                                            Storyboard.TargetProperty="Opacity"
                                                            To="1" Duration="0:0:0.1" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation  
                                                            Storyboard.TargetName="windowButtonBackground"
                                                            Storyboard.TargetProperty="Opacity"
                                                            To="0" Duration="0:0:0.3" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ToggleButton Name="dokeyToggleButton"
                              WindowChrome.IsHitTestVisibleInChrome="True">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <ContentPresenter/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                    <ToggleButton.Content>
                        <Border VerticalAlignment="Top"
                                Margin="2"
                                Padding="3,2,1,2">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource ButtonBackgroundColor}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Canvas Width="24" Height="18" Opacity="0.75">
                                <Path Name="path1109" StrokeThickness="2.5" Stroke="{DynamicResource DokeyToggleButtonColor}" StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Opacity="1" Data="m 6 9 v 4"/>
                                <Path Name="path1107" StrokeThickness="2.4" Stroke="{DynamicResource DokeyToggleButtonColor}" StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Opacity="1" Data="M 2.8 9 H 14"/>
                                <Ellipse Canvas.Left="13.8" Width="6.4" Canvas.Top="5.3" Height="7.4" Name="path344" StrokeThickness="1.56208" Stroke="{DynamicResource DokeyToggleButtonColor}" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Opacity="1"/>
                            </Canvas>
                        </Border>
                    </ToggleButton.Content>
                    <ToggleButton.ContextMenu>
                        <ContextMenu Name="dokeyContextMenu" Placement="Bottom">
                            <!-- menu items here are removed and readded in dokey.ps1 by dokey-settings.psd1 -->
                            <MenuItem Header="example menu item #1"/>
                            <MenuItem Header="example menu item #2"/>
                            <Separator/>
                            <MenuItem Header="hide password" IsCheckable="True"/>
                            <MenuItem Header="dark mode" IsCheckable="True"/>
                        </ContextMenu>
                    </ToggleButton.ContextMenu>
                </ToggleButton>
                <Label Content="{Binding Path=Title, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                       Foreground="{DynamicResource ForegroundColor}"
                       Margin="0,2"
                       Padding="0"
                       VerticalAlignment="Top"
                       Grid.Column="1"/>
                <StackPanel Orientation="Horizontal"
                            VerticalAlignment="Top"
                            Grid.Column="2">
                    <Button Name="windowMinimizeButton" Margin="0,2">
                        <Canvas Width="22" Height="21">
                            <Path Fill="{DynamicResource ForegroundColor}" StrokeThickness="3.77953" StrokeMiterLimit="4" StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Data="M 3.9884034 9.3419024 V 11.342395 H 17.895857 V 9.3419024 Z"/>
                        </Canvas>
                    </Button>
                    <Button Name="windowCloseButton" IsCancel="True" Background="{DynamicResource WindowCloseButtonBackgroundColor}" Margin="2">
                        <Canvas Width="22" Height="21">
                            <Canvas.RenderTransform>
                                <TranslateTransform X="-0.58344538" Y="-1.7512921"/>
                            </Canvas.RenderTransform>
                            <Path Fill="{DynamicResource ForegroundColor}" Data="M 13.46 12 19 17.54 V 19 H 17.54 L 12 13.46 6.46 19 H 5 V 17.54 L 10.54 12 5 6.46 V 5 H 6.46 L 12 10.54 17.54 5 H 19 v 1.46 z"/>
                        </Canvas>
                    </Button>
                </StackPanel>
            </Grid>
            <StackPanel Orientation="Horizontal" Grid.Row="1">
                <Border BorderBrush="{DynamicResource ForegroundColor}" BorderThickness="1" CornerRadius="2" Width="270"
                            Height="40"
                            Margin="32,17,10,21">
                    <StackPanel>
                        <TextBox Name="tbxPassword"
                                 Foreground="{DynamicResource ForegroundColor}"
                                 Background="{DynamicResource TextBoxBackgroundColor}"
                                 BorderThickness="0"
                                 Padding="5"
                                 FontSize="20"
                                 TextWrapping="NoWrap">
                            <TextBox.Resources>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="CornerRadius" Value="2"/>
                                </Style>
                            </TextBox.Resources>
                        </TextBox>
                        <PasswordBox Name="pbxPassword"
                                     Foreground="{DynamicResource ForegroundColor}"
                                     Background="{DynamicResource TextBoxBackgroundColor}"
                                     BorderThickness="0"
                                     Padding="5"
                                     FontSize="20"
                                     Visibility="Collapsed">
                            <PasswordBox.Resources>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="CornerRadius" Value="2"/>
                                </Style>
                            </PasswordBox.Resources>
                        </PasswordBox>
                    </StackPanel>
                </Border>
                <Button Name="btnGenerate" VerticalAlignment="Center">
                    <Canvas Width="24" Height="24">
                        <Canvas.RenderTransform>
                            <MatrixTransform Matrix="0.99924854 0 0 0.99712481 0.00300584 0.00287519"/>
                        </Canvas.RenderTransform>
                        <Path Fill="{DynamicResource GenerateButtonColor}" Data="M 12 5 V 1 l -5 5 5 5 V 7 a 6 6 0 0 1 6 6 6 6 0 0 1 -6 6 6 6 0 0 1 -6 -6 H 4 a 8 8 0 0 0 8 8 8 8 0 0 0 8 -8 8 8 0 0 0 -8 -8 z"/>
                    </Canvas>
                </Button>
                <Grid>
                    <Button Name="btnCopy" Margin="10,0,0,0" VerticalAlignment="Center" Width="Auto" IsEnabled="False">
                        <Canvas Width="24" Height="24">
                            <Canvas.RenderTransform>
                                <MatrixTransform Matrix="0.99924854 0 0 0.99712481 -0.99774562 0.00287519"/>
                            </Canvas.RenderTransform>
                            <Path Fill="{DynamicResource CopyButtonColor}" Data="M 21 11.11 V 5 C 21 3.9 20.11 3 19 3 H 14.82 C 14.4 1.84 13.3 1 12 1 10.7 1 9.6 1.84 9.18 3 H 5 C 3.9 3 3 3.9 3 5 v 14 c 0 1.11 0.9 2 2 2 h 6.11 c 1.26 1.24 2.98 2 4.89 2 3.87 0 7 -3.13 7 -7 0 -1.91 -0.76 -3.63 -2 -4.89 M 12 3 c 0.55 0 1 0.45 1 1 0 0.55 -0.45 1 -1 1 C 11.45 5 11 4.55 11 4 11 3.45 11.45 3 12 3 M 5 19 V 5 H 7 V 7 H 17 V 5 h 2 V 9.68 C 18.09 9.25 17.08 9 16 9 c -3.87 0 -7 3.13 -7 7 0 1.08 0.25 2.09 0.68 3 H 5 m 11 2 c -2.76 0 -5 -2.24 -5 -5 0 -2.76 2.24 -5 5 -5 2.76 0 5 2.24 5 5 0 2.76 -2.24 5 -5 5 m 0.5 -4.75 2.86 1.69 -0.75 1.22 L 15 17 v -5 h 1.5 z"/>
                        </Canvas>
                    </Button>
                    <Canvas Width="32" Height="32" x:Name="countdownCanvas" Visibility="Collapsed">
                        <Canvas.RenderTransform>
                            <TranslateTransform X="20" Y="16"/>
                        </Canvas.RenderTransform>
                        <Path x:Name="countdownPath"
                              Fill="{x:Null}"
                              Stroke="{DynamicResource CountdownColor}"
                              StrokeThickness="3"
                              StrokeEndLineCap="Flat"
                              StrokeLineJoin="Round">
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure x:Name="arcStartPoint"          
                                                IsClosed="False">
                                        <ArcSegment x:Name="arcCountdown"
                                                    Point="0 -16"
                                                    Size="16 16"
                                                    IsLargeArc="True"
                                                    SweepDirection="Clockwise"/>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                    </Canvas>
                </Grid>
            </StackPanel>
            <StackPanel Grid.Row="2">
                <StackPanel.Resources>
                    <Style TargetType="TextBox">
                        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
                        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundColor}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderColor}"/>
                    </Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
                    </Style>
                    <Style x:Key="FocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2"
                                            SnapsToDevicePixels="true"
                                            Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                            StrokeDashArray="1 2"
                                            StrokeThickness="1" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="OptionMarkFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="14,0,0,0"
                                            SnapsToDevicePixels="true"
                                            Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                            StrokeDashArray="1 2"
                                            StrokeThickness="1" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style TargetType="CheckBox">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type CheckBox}">
                                    <Grid x:Name="templateRoot"
                                        Background="Transparent"
                                        SnapsToDevicePixels="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="checkBoxBorder"
                                            Margin="1"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Background="{DynamicResource CheckBoxBackgroundColor}"
                                            BorderBrush="{DynamicResource CheckBoxBorderColor}"
                                            BorderThickness="{TemplateBinding BorderThickness}">
                                        <Grid x:Name="markGrid">
                                            <Path x:Name="optionMark"
                                                Margin="1"
                                                Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                                Fill="{DynamicResource OptionMarkGlyphColor}"
                                                Opacity="0"
                                                Stretch="None" />
                                            <Rectangle x:Name="indeterminateMark"
                                                        Margin="2"
                                                        Fill="{DynamicResource OptionMarkGlyphColor}"
                                                        Opacity="0" />
                                        </Grid>
                                    </Border>
                                    <ContentPresenter x:Name="contentPresenter"
                                                        Grid.Column="1"
                                                        Margin="{TemplateBinding Padding}"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Focusable="False"
                                                        RecognizesAccessKey="True"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="HasContent"
                                                    Value="true">
                                            <Setter Property="FocusVisualStyle"
                                                    Value="{StaticResource OptionMarkFocusVisual}" />
                                            <Setter Property="Padding"
                                                    Value="4,-1,0,0" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver"
                                                    Value="true">
                                            <Setter TargetName="checkBoxBorder"
                                                    Property="Background"
                                                    Value="{DynamicResource OptionMarkMouseOverBackgroundColor}" />
                                            <Setter TargetName="checkBoxBorder"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource OptionMarkMouseOverBorderColor}" />
                                            <Setter TargetName="optionMark"
                                                    Property="Fill"
                                                    Value="{DynamicResource OptionMarkMouseOverGlyphColor}" />
                                            <Setter TargetName="indeterminateMark"
                                                    Property="Fill"
                                                    Value="{DynamicResource OptionMarkMouseOverGlyphColor}" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled"
                                                    Value="false">
                                            <Setter TargetName="checkBoxBorder"
                                                    Property="Background"
                                                    Value="{DynamicResource OptionMarkDisabledBackgroundColor}" />
                                            <Setter TargetName="checkBoxBorder"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource OptionMarkDisabledBorderColor}" />
                                            <Setter TargetName="optionMark"
                                                    Property="Fill"
                                                    Value="{DynamicResource OptionMarkDisabledGlyphColor}" />
                                            <Setter TargetName="indeterminateMark"
                                                    Property="Fill"
                                                    Value="{DynamicResource OptionMarkDisabledGlyphColor}" />
                                        </Trigger>
                                        <Trigger Property="IsPressed"
                                                    Value="true">
                                            <Setter TargetName="checkBoxBorder"
                                                    Property="Background"
                                                    Value="{DynamicResource OptionMarkPressedBackgroundColor}" />
                                            <Setter TargetName="checkBoxBorder"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource OptionMarkPressedBorderColor}" />
                                            <Setter TargetName="optionMark"
                                                    Property="Fill"
                                                    Value="{DynamicResource OptionMarkPressedGlyphColor}" />
                                            <Setter TargetName="indeterminateMark"
                                                    Property="Fill"
                                                    Value="{DynamicResource OptionMarkPressedGlyphColor}" />
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                    Value="True">
                                            <Setter TargetName="optionMark"
                                                    Property="Opacity"
                                                    Value="1" />
                                            <Setter TargetName="indeterminateMark"
                                                    Property="Opacity"
                                                    Value="0" />
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                    Value="{x:Null}">
                                            <Setter TargetName="optionMark"
                                                    Property="Opacity"
                                                    Value="0" />
                                            <Setter TargetName="indeterminateMark"
                                                    Property="Opacity"
                                                    Value="1" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </StackPanel.Resources>
                <StackPanel Orientation="Horizontal" Margin="8,0,0,8">
                    <Button Name="expandCollapseButton" HorizontalAlignment="Left">
                        <Canvas Width="22" Height="15">
                            <Path Fill="{DynamicResource ForegroundColor}" Name="pthCollapse" Data="M 7.41 8.58 12 13.17 16.59 8.58 18 10 12 16 6 10 Z">
                                <Path.RenderTransform>
                                    <MatrixTransform Matrix="0.99924854 0 0 0.99712481 -0.99098248 -4.4573865"/>
                                </Path.RenderTransform>
                            </Path>
                            <Path Fill="{DynamicResource ForegroundColor}" Opacity="0" Name="pthExpand" StrokeThickness="0.998186" Data="M 6.4134492 10.902054 11 6.3252528 15.586551 10.902054 16.995491 9.4861382 11 3.5033896 5.0045088 9.4861382 Z"/>
                        </Canvas>
                    </Button>
                    <Border Name="bdrPasswordLength" BorderBrush="#00ff0000" BorderThickness="2" Margin="4,0,0,0">
                        <TextBox Name="tbxPasswordLength" MaxLength="3" Width="32" TextAlignment="Center">12</TextBox>
                    </Border>
                    <Label Name="lblCharacterClass" Margin="3,2,0,2" Padding="0,1,0,0" VerticalAlignment="Top">&#215; cC3+</Label>
                </StackPanel>
                <StackPanel Name="stkSettings" Visibility="Collapsed" Margin="39,10,15,30">
                    <StackPanel Orientation="Horizontal">
                        <CheckBox Name="cbxLowercase" IsChecked="True" VerticalAlignment="Center" Margin="0"/>
                        <Border Name="bdrLowercase" BorderBrush="#00ff0000" BorderThickness="0 0 0 1" Margin="4,2,2,1">
                            <TextBox Name="tbxLowercase" Width="262">abcdefghijkmnpqrstuvxyz</TextBox>
                        </Border>
                        <Label Name="lblLowercase" Margin="4,2,0,2" Padding="0">&#8804;</Label>
                        <Border Name="bdrMinLowercase" BorderBrush="#00ff0000" BorderThickness="2" Margin="4,0,0,0">
                            <TextBox Name="tbxMinLowercase" MaxLength="2" Width="32" TextAlignment="Center">4</TextBox>
                        </Border>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,7,0,0">
                        <CheckBox Name="cbxUppercase" IsChecked="True" VerticalAlignment="Center" Margin="0"/>
                        <Border Name="bdrUppercase" BorderBrush="#00ff0000" BorderThickness="0 0 0 1" Margin="4,2,2,1">
                            <TextBox Name="tbxUppercase" Width="262">ABCDEFGHJKLMNPQRSTUVWXYZ</TextBox>
                        </Border>
                        <Label Name="lblUppercase" Margin="4,2,0,2" Padding="0">&#8804;</Label>
                        <Border Name="bdrMinUppercase" BorderBrush="#00ff0000" BorderThickness="2" Margin="4,0,0,0">
                            <TextBox Name="tbxMinUppercase" MaxLength="2" Width="32" TextAlignment="Center">3</TextBox>
                        </Border>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,7,0,0">
                        <CheckBox Name="cbxNumbers" IsChecked="True" VerticalAlignment="Center" Margin="0"/>
                        <Border Name="bdrNumbers" BorderBrush="#00ff0000" BorderThickness="0 0 0 1" Margin="4,2,2,1">
                            <TextBox Name="tbxNumbers" Width="262">123456789</TextBox>
                        </Border>
                        <Label Name="lblNumbers" Margin="4,2,0,2" Padding="0">&#8804;</Label>
                        <Border Name="bdrMinNumbers" BorderBrush="#00ff0000" BorderThickness="2" Margin="4,0,0,0">
                            <TextBox Name="tbxMinNumbers" MaxLength="2" Width="32" TextAlignment="Center">1</TextBox>
                        </Border>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,7,0,0">
                        <CheckBox Name="cbxSpecials" IsChecked="True" VerticalAlignment="Center" Margin="0"/>
                        <Border Name="bdrSpecials" BorderBrush="#00ff0000" BorderThickness="0 0 0 1" Margin="4,2,2,1">
                            <TextBox Name="tbxSpecials" Width="262">,.+#*-!$%&amp;/?</TextBox>
                        </Border>
                        <Label Name="lblSpecials" Margin="4,2,0,2" Padding="0">&#8804;</Label>
                        <Border Name="bdrMinSpecials" BorderBrush="#00ff0000" BorderThickness="2" Margin="4,0,0,0">
                            <TextBox Name="tbxMinSpecials" MaxLength="2" Width="32" TextAlignment="Center">1</TextBox>
                        </Border>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </Grid>
    </Border>

</Window>